import socket
import threading
import time
from p2pnetwork.node import Node

BROADCAST_PORT = 12000  # UDP –ø–æ—Ä—Ç –¥–ª—è discovery
TCP_PORT = 10001  # TCP –ø–æ—Ä—Ç –¥–ª—è Mesh-—Å–µ—Ä–≤–µ—Ä–∞/–∫–ª–∏–µ–Ω—Ç–∞
DISCOVERY_TIMEOUT = 3  # –ö–∞–∫ –¥–æ–ª–≥–æ —Å–ª—É—à–∞–µ–º —Å–µ—Ç—å, —Å–µ–∫


def get_my_ip():
    """ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± —É–∑–Ω–∞—Ç—å —Å–≤–æ–π LAN IP. """
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(('8.8.8.8', 80))
        ip = s.getsockname()[0]
    except Exception:
        ip = '127.0.0.1'
    finally:
        s.close()
    return ip


def get_network_prefix():
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å–µ—Ç–∏ (–ø–µ—Ä–≤—ã–µ 3 –æ–∫—Ç–µ—Ç–∞)"""
    my_ip = get_my_ip()
    parts = my_ip.split('.')
    if len(parts) == 4:
        return '.'.join(parts[:3]) + '.'
    return None


def scan_local_network():
    """–°–∫–∞–Ω–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–∑–ª–æ–≤"""
    network_prefix = get_network_prefix()
    if not network_prefix:
        print("[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å —Å–µ—Ç–∏")
        return set()

    active_peers = set()

    def check_peer(ip):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–∑–ª–∞"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((ip, TCP_PORT))
            sock.close()
            if result == 0:
                active_peers.add((ip, TCP_PORT))
                print(f"[SCAN] –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —É–∑–µ–ª: {ip}:{TCP_PORT}")
        except:
            pass

    print(f"[SCAN] –°–∫–∞–Ω–∏—Ä—É–µ–º —Å–µ—Ç—å {network_prefix}1-99...")

    # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–≥–æ IP
    threads = []
    for i in range(1, 100):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º IP —Å 1 –¥–æ 99
        ip = f"{network_prefix}{i}"
        if ip != get_my_ip():  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–±—è
            thread = threading.Thread(target=check_peer, args=(ip,))
            thread.daemon = True
            thread.start()
            threads.append(thread)

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for thread in threads:
        thread.join(timeout=0.5)

    return active_peers


def discover_peers(my_tcp_port=TCP_PORT, broadcast_port=BROADCAST_PORT, timeout=DISCOVERY_TIMEOUT):
    """ –ê–≤—Ç–æ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–∏—Ä–æ–≤ —á–µ—Ä–µ–∑ UDP broadcast. """
    my_ip = get_my_ip()
    peers = set()
    stop_flag = threading.Event()

    def listen():
        udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
        udp_sock.bind(('', broadcast_port))
        udp_sock.settimeout(0.5)
        while not stop_flag.is_set():
            try:
                msg, addr = udp_sock.recvfrom(1024)
                if msg.startswith(b'MESH_DISCOVERY:'):
                    sender_port = int(msg.decode().split(':')[1])
                    peer_ip = addr[0]
                    peer = (peer_ip, sender_port)
                    if peer != (my_ip, my_tcp_port):
                        peers.add(peer)
                        print(f"[DISCOVERY] –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∏—Ä —á–µ—Ä–µ–∑ broadcast: {peer}")
            except socket.timeout:
                continue
        udp_sock.close()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –±—Ä–æ–¥–∫–∞—Å—Ç–æ–≤
    listen_thread = threading.Thread(target=listen, daemon=True)
    listen_thread.start()

    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±—Ä–æ–¥–∫–∞—Å—Ç–∏–º —Å–≤–æ–π –ø–æ—Ä—Ç
    udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    udp_sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    my_msg = f"MESH_DISCOVERY:{my_tcp_port}".encode()
    end = time.time() + timeout

    while time.time() < end:
        udp_sock.sendto(my_msg, ('<broadcast>', broadcast_port))
        time.sleep(1)

    stop_flag.set()
    listen_thread.join()
    udp_sock.close()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ç–∏
    scanned_peers = scan_local_network()
    all_peers = peers.union(scanned_peers)

    # –ù–µ –≤–∫–ª—é—á–∞–µ–º —Å–µ–±—è
    return {p for p in all_peers if p != (my_ip, my_tcp_port)}


class MeshNode(Node):
    def __init__(self, host, port, name):
        super().__init__(host, port, None)
        self.name = name
        self.connected_peers = set()

    def node_message(self, connected_node, data):
        print(f"\n[RECV][{connected_node.host}:{connected_node.port}] -> {data}")

    def node_connect_with_node(self, node):
        print(f"[CONNECT] -> {node.host}:{node.port}")
        self.connected_peers.add((node.host, node.port))

    def node_disconnect_with_node(self, node):
        print(f"[DISCONN] -> {node.host}:{node.port}")
        if (node.host, node.port) in self.connected_peers:
            self.connected_peers.remove((node.host, node.port))

    def node_request_to_stop(self):
        print(f"[STOP] Node {self.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def auto_connect_to_peers(self, peers):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º"""
        my_ip = get_my_ip()
        for peer_ip, peer_port in peers:
            if (peer_ip, peer_port) != (my_ip, self.port) and \
                    (peer_ip, peer_port) not in self.connected_peers:
                print(f"[AUTO-CONNECT] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ {peer_ip}:{peer_port}...")
                try:
                    self.connect_with_node(peer_ip, peer_port)
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
                except Exception as e:
                    print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {peer_ip}:{peer_port}: {e}")


def send_mesh_messages(node):
    try:
        while True:
            print("\n" + "=" * 50)
            print("–ö–æ–º–∞–Ω–¥—ã:")
            print("1. –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            print("2. 'scan' - –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å")
            print("3. 'list' - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–∑–ª—ã")
            print("4. 'exit' - –≤—ã–π—Ç–∏")
            print("=" * 50)

            msg = input('\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: ')

            if msg == 'exit':
                print("[INFO] Mesh node –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
                node.stop()
                break
            elif msg == 'scan':
                print("[INFO] –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏...")
                new_peers = scan_local_network()
                if new_peers:
                    print(f"[SCAN] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —É–∑–ª–æ–≤: {len(new_peers)}")
                    node.auto_connect_to_peers(new_peers)
                else:
                    print("[SCAN] –ù–æ–≤—ã—Ö —É–∑–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            elif msg == 'list':
                print("üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É–∑–ª—ã:")
                if node.connected_peers:
                    for peer in node.connected_peers:
                        print(f"  - {peer[0]}:{peer[1]}")
                else:
                    print("  –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤")
            else:
                node.send_to_nodes({
                    "type": "message",
                    "msg": msg,
                    "from": node.name,
                    "timestamp": time.time()
                })
                print(f"[SEND] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except (EOFError, KeyboardInterrupt):
        node.stop()


if __name__ == "__main__":
    host = "0.0.0.0"
    port = TCP_PORT
    my_ip = get_my_ip()
    name = f"Peer_{my_ip}:{port}"

    print(f"[INFO] –ú–æ–π IP: {my_ip}")
    print(f"[INFO] –ü–æ—Ä—Ç: {port}")
    print(f"[INFO] –ò–º—è —É–∑–ª–∞: {name}")
    print(f"[INFO] –ê–≤—Ç–æ–ø–æ–∏—Å–∫ mesh-–ø–∏—Ä–æ–≤ ... (–∂–¥—ë–º {DISCOVERY_TIMEOUT}—Å)")

    # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –ø–∏—Ä–æ–≤ (broadcast + —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∏)
    found_peers = discover_peers(my_tcp_port=port)

    if found_peers:
        print(f"[INFO] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∏—Ä—ã: {len(found_peers)}")
        for peer in found_peers:
            print(f"  - {peer[0]}:{peer[1]}")
    else:
        print("[INFO] –ü–∏—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—ã –ø–µ—Ä–≤—ã–π –≤ —Å–µ—Ç–∏!")
    print("#" * 50)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–∑–µ–ª
    node = MeshNode(host, port, name)
    node.start()
    print(f"[INFO] Mesh node {name} —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –Ω–∞ {host}:{port}")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∏—Ä–∞–º
    if found_peers:
        node.auto_connect_to_peers(found_peers)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    sender = threading.Thread(target=send_mesh_messages, args=(node,))
    sender.daemon = True
    sender.start()

    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n[INFO] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–∑–µ–ª...")
        node.stop()

    print("[INFO] Node –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
